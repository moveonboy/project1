function substrSpecies = inferGTGlySubstr(prodObj,enzObj,usebracket)
% inferGTGlySubstr infer the substrate based on the GT enzyme and product.
%
%  [numSubstr,substrSpecies,rxns,pathway] = inferGlySubstr(prodObj,enz)
%   returns the pathway  if the enzyme acts to form the product prodObj. If
%   no substrate  is found, pathway is set empty.
%
%      Example 1:
%            mani  =GHEnz.loadmat('mani.mat');
%            m8species  = GlycanSpecies(glycanMLread('M8.glycoct_xml'));
%            [nsubstr, m9species] = inferGlySubstr(m8species,mani);
%            options  = displayset('showmass',true,'showLinkage',true,...
%                             'showRedEnd',true);
%            for i = 1: nsubstr
%                glycanViewer(m9species.get(i).glycanStruct,options);
%            end
%
%      Example 2:
%             mani  =GHEnz.loadmat('mani.mat');
%            m8species  = GlycanSpecies(glycanMLread('M8.glycoct_xml'));
%            [nsubstr, m9species,m8rxns] = inferGlySubstr(m8species,mani);
%            for i = 1: nsubstr
%               glycanRxnViewer(m8rxns.get(i));
%            end
%
%      Example 3:
%            mani  =GHEnz.loadmat('mani.mat');
%            m8species  = GlycanSpecies(glycanMLread('M8.glycoct_xml'));
%            [nsubstr, m9species,m8rxns,m8pathway] = inferGlySubstr(m8species,mani);
%            glycanPathViewer(m8pathway);
%
% See also inferGlyProd,inferGlyRevrPath.

% Author: Gang Liu,Yusen Zhou
% Date Last Updated: 11/18/14

isSubstrValid = true;

% rule 1: N-, O-, glycolipids
if(~isempty(enzObj.glycanTypeSpec))
    requirementglycantype     = enzObj.glycanTypeSpec;
    acceptortype    = glycanObj.glycanTypeSpec;
    isSubstrValid   = isequal(acceptortype,requirementglycantype);
end

isPathUpdated = false;
if(isSubstrValid)
    funcresrequirement    = enzObj.dispFuncResLink;
    for i = 1 : numTermRes
        nreResidue          = nreResidues{1,i};
        
        % rule 3: terminal residue must be function group defined in the
        % enzyme obj
        terminalInfo   = nreResidue.dispResidueInfo;
        isValidRxnPos = fuzzymatch(terminalInfo,funcresrequirement);
        if(~isValidRxnPos)
            continue;
        end
        
        % rule 4: if the the substrate should target the terminal residue
        if(~isempty(enzObj.isTerminalTarget))
            if(enzObj.isTerminalTarget)
                if(length(nreResidue.getParent.linkageChildren)==1);
                    isValidRxnPos = true;
                else
                    isValidRxnPos = false;
                end
            else
                isValidRxnPos = true;
            end
        else
            isValidRxnPos = true;
        end
        
        if(~isValidRxnPos)
            continue;
        end
        
        % rule 5:resiude next to terminal residue is the same as
        % acceptorResidue
        requirement        = enzObj.dispAttachResLink;
        nexterminalResidue = nreResidue.getParent;
        if(~isempty(nexterminalResidue))
            acceptorTerminal     = nexterminalResidue.dispResidueInfo;
        else
            acceptorTerminal    = '';
        end
        
        isValidRxnPos = fuzzymatch(acceptorTerminal,requirement);
        if(~isValidRxnPos)
            continue;
        end
        
        % rule 6: the product should not be greater than the specified structure
        if(~isempty(enzObj.prodMinStruct))
            isValidRxnPos = isValidRxnPos && ...
                glycanObj.contains(enzObj.prodMinStruct);
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 7: the enzyme should not work on the children of specificed structure
        if(~isempty(enzObj.prodMaxStruct))
            isValidRxnPos = isValidRxnPos && ...
                enzObj.prodMaxStruct.contains(glycanObj);
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 8: the enzyme should transfer the residue to the target branch
        if(~isempty(enzObj.targetBranch))  % if the rule exists
            chartargetbranch   = enzObj.targetBranch.name;
            chartargetbranch   = regexprep(chartargetbranch,'freeEnd--','');
            chartargetbranch   = regexprep(chartargetbranch,'redEnd--','');
            chartargetbranch   = regexprep(chartargetbranch,'p','o');
            charresidue        = glycanObj.getresiduetoroot(nreResidue.getParent);
            charresidue        = regexprep(charresidue,'freeEnd--','');
            charresidue        = regexprep(charresidue,'redEnd--','');
            charresidue        = regexprep(charresidue,'p','o');
            
            isValidRxnPos      = fuzzymatch(chartargetbranch,charresidue);
            if(~isValidRxnPos)
                continue;
            end
        end
        % rule 9: the enzyme should transfer the residue to the target branch containing
        % specified structure
        if(~isempty(enzObj.targetbranchcontain)) % if the rule exists
            chartargetbranch = enzObj.targetbranchcontain.name;
            chartargetbranch = regexprep(chartargetbranch,'freeEnd--',' ');
            chartargetbranch = regexprep(chartargetbranch,'?','');
            
            if(isempty(enzObj.isTerminalTarget))
                enzObj.isTerminalTarget = true;
            end
            %
            if(~enzObj.isTerminalTarget)
                parentresidue = nreResidue.getParent;
                charresidue   = glycanObj.getresiduetoterminal(parentresidue,nreResidue);
                charresidue   = regexprep(charresidue,'freeEnd--','');
                charresidue   = regexprep(charresidue,'?','');
                
                isValidRxnPos = isValidRxnPos && (~isempty(strfind(strtrim(charresidue),...
                    strtrim(chartargetbranch))));
            else
                parentresidue = nreResidue.getParent;
                charresidue   = glycanObj.getresiduetoroot(parentresidue);
                charresidue   = regexprep(charresidue,'freeEnd--','');
                charresidue   = regexprep(charresidue,'?','');
                
                isValidRxnPos = isValidRxnPos && (~isempty(strfind(strtrim(charresidue),...
                    strtrim(chartargetbranch))));
            end
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 10: the enzyme should not act on the specificed branch
        if(~isempty(enzObj.targetNABranch))  % if the rule exists
            if(isa(enzObj.targetNABranch,'GlycanStruct'))
                chartargetbranch = enzObj.targetNABranch.name;
                charresidue           = glycanObj.getresiduetoroot(...
                    nreResidue.getParent);
                isValidRxnPos         = isValidRxnPos && ...
                    (~strcmp(chartargetbranch,charresidue));
            elseif(isa(enzObj.targetNABranch,'CellArrayList'))
                for ii = 1 : length(enzObj.targetNABranch)
                    chartargetbranch  = enzObj.targetNABranch.name;
                    charresidue       = glycanObj.getresiduetoroot(...
                        nreResidue.getParent);
                    isValidRxnPos     = isValidRxnPos && ...
                        (~strcmp(chartargetbranch,charresidue));
                end
            end
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        glycanSubstrObj     = glycanObj.clone;
        nreResidues         = glycanSubstrObj.getNonRedEndResidue;
        nreResiduetoremove  = nreResidues{1,i};
        
        isResidueDeleted    = glycanSubstrObj.removeNonRedEndResidue(...
            nreResiduetoremove);
        
        %rule 11: It does not contain the specified residue
        if(~isempty(enzObj.substNAResidue))
            NAResiduename = enzObj.substNAResidue.name;
            composition   = glycanSubstrObj.getComposition;
            isValidRxnPos  =  ~(isfield(composition,NAResiduename) ...
                && (composition.(NAResiduename)>=1));
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        
        % rule 12: the substrate should not contain the specificed branch
        if(~isempty(enzObj.substNABranch))  % if the rule exists
            if(isa(enzObj.substNABranch,'GlycanStruct'))
                isValidRxnPos = isValidRxnPos &&...
                    (~glycanSubstrObj.contains(enzObj.substNABranch));
            elseif(isa(enzObj.substNABranch,'CellArrayList'))
                for ii = 1 : length(enzObj.substNABranch)
                    isValidRxnPos = isValidRxnPos && ...
                        (~glycanSubstrObj.contains(enzObj.substNABranch.get(ii)));
                end
            end
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 13, the enzyme should not work on the parent of specified structure
        if(~isempty(enzObj.substMaxStruct)) % if the rule exists
            isValidRxnPos = isValidRxnPos && ...
                enzObj.substMaxStruct.contains(glycanSubstrObj);
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 14, the enzyme should not work on the children of specified structure
        if(~isempty(enzObj.substMinStruct))  % if the rule exists
            isValidRxnPos = isValidRxnPos &&...
                glycanSubstrObj.contains(enzObj.substMinStruct);
            if(~isValidRxnPos)
                continue;
            end
        end
        
        numSubstr = numSubstr+1;
        substr = GlycanSpecies(glycanSubstrObj);
        substrSpecies.add(substr);
    end
    
    % Check if need to add bracket.
    if(usebracket)
        if(numSubstr>1)
            isbracket = 0;
            isbranchdepthvalid =0;
            prodnumTermRes = length(nreResidues);
            for j = 1 : length(nreResidues)
                jthresidue = nreResidues{1,j};
                if(isequal(jthresidue.residueType.name,'Fuc'))
                    prodnumTermRes = prodnumTermRes-1;
                    continue
                end
                
                if(isequal(jthresidue.residueType.name,'GlcNAc'))&&...
                        (isequal(jthresidue.getParent.residueType.name,'Man'))&&...
                        (isequal(jthresidue.getParent.anomer.symbol,'b'))
                    prodnumTermRes = prodnumTermRes-1;
                    continue
                end
                
                brachdepth = prodObj.glycanStruct.getBranchDepth(jthresidue);
                if(brachdepth>=6)
                    isbranchdepthvalid = isbranchdepthvalid+1;
                end
            end
            
            if(numSubstr==prodnumTermRes)&&(isbranchdepthvalid==prodnumTermRes)
                isbracket = 1;
            end
            
            if(isbracket)
                numSubstr     = 1;
                substr        = substrSpecies.get(1);
                substrSpecies = CellArrayList;
                substrSpecies.add(substr);
                substrnreResidues = substrSpecies.get(1).glycanStruct.getNonRedEndResidue;
                counter = 0;
                for i = 1 : length(substrnreResidues)
                    ithnreresidue = substrnreResidues{1,i};
                    if(isequal(ithnreresidue.residueType.name,'Fuc'))&&...
                            (isequal(ithnreresidue.linkageParent.bonds.posParent,'6'))
                        continue
                    end
                    
                    if(isequal(ithnreresidue.residueType.name,nreResiduetoremove.residueType.name))
                        residuestobracket(counter+1,1) = ithnreresidue;
                        counter = counter+1;
                    end
                end
                substrSpecies.get(1).glycanStruct.bracketResidue(residuestobracket);
            end
        end
    end
    
    if(nargout>=3)
        for i = 1 : length(substrSpecies)
            rxns.add(Rxn(substrSpecies.get(i),prodObj,enzObj));
        end
        
        if(nargout==4)
            isPathUpdated = isPathUpdated || isResidueDeleted;
        end
    end
end
end

function ismatch=fuzzymatch(str1,str2)
if(length(str1)~=length(str2))
    ismatch = 0;
    return
end

if(isempty(strfind(str1,'?')))&&(isempty(strfind(str2,'?')))
    ismatch  = strcmpi(str1,str2);
elseif(~isempty(strfind(str1,'?')))
    str2(strfind(str1,'?')) = '?';
    ismatch  = strcmpi(str1,str2);
elseif(~isempty(strfind(str2,'?')))
    str1(strfind(str2,'?')) = '?';
    ismatch  = strcmpi(str2,str1);
end

end


