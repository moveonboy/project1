function varargout=inferBracketGlySubstr(prodObj,enzObj)

if(isa(prodObj,'GlycanSpecies'))
    glycanObj =  prodObj.glycanStruct;
else
    error('MATLAB:GNAT:WrongInput','Input Wrong Type');
end

if(isa(enzObj,'GTEnz'));
    nreResidues       = glycanObj.getNonRedEndResidue;
    nreResiduebracket = getNonRedEndResidue(glycanObj,'bracket');
    commomresidues    = getAllResidues(glycanObj,'root');
    bracketresidue    = getAllResidues(glycanObj,'bracket');
    numTermRes        = length(nreResidues);
else
    error('MATLAB:GNAT:NOTSUPPORTEDENZYME','NOT SUPPORTED ENZYME IN BRACKETSPECIES');
end

numSubstr=0;
substrSpecies=CellArrayList;
if(nargout==3)
    rxns=CellArrayList;
elseif(nargout==4)
    rxns=CellArrayList;
    path=Pathway;
end

isSubstrValid = true;

% rule 1: N-, O-, glycolipids
if(~isempty(enzObj.glycanTypeSpec))
    requirementglycantype     = enzObj.glycanTypeSpec;
    acceptortype              = glycanObj.glycanTypeSpec;
    isSubstrValid             = isequal(acceptortype,requirementglycantype);
end

% rule 2: check if terminal residues available.
isPathUpdated = false;
if(isSubstrValid)&&(isProdValid)
    funcresrequirement    = enzObj.dispFuncResLink;
    for i = 1 : numTermRes
        nreResidue          = nreResidues{1,i};
        
        % rule 3: terminal residue must be function group defined in the
        % enzyme obj
        terminalInfo   = nreResidue.dispResidueInfo;
        if(~isequal(length(terminalInfo),length(funcresrequirement)))
            continue;
        end
        
        if(isempty(strfind(terminalInfo,'?')))&&(isempty(strfind(funcresrequirement,'?')))
            isValidRxnPos  = isequal(terminalInfo,funcresrequirement);
        elseif(strfind(terminalInfo,'?'))
            position = strfind(terminalInfo,'?');
            terminalInfo(position) = '';
            enzfuncres             = funcresrequirement;
            enzfuncres(position)   = '';
            isValidRxnPos  = isequal(terminalInfo,enzfuncres);
        elseif(strfind(funcresrequirement,'?'))
            position = strfind(funcresrequirement,'?');
            terminalInfo(position) = '';
            enzfuncres             = funcresrequirement;
            enzfuncres(position)   = '';
            isValidRxnPos  = isequal(terminalInfo,enzfuncres);
        end
        
        isFucValid = true;
        if(isequal(enzObj.name,'glycoprotein 6-alpha-L-fucosyltransferase'))
            parentResidue = nreResidue.getParent;
            if(isequal(parentResidue.residueType.name, '#bracket'))
               isFucValid = false;
            end
        end
        
        isValidRxnPos = (isFucValid)&&(isValidRxnPos);
        if(~isValidRxnPos)
            continue;
        end
        
        inBracket = 0;
        for j = 1 : length(bracketresidue)
            jthnreResidue = bracketresidue{1,j};
            if(isequal(jthnreResidue.IDres,nreResidue.IDres))
                inBracket = 1;
            end
        end
        
        if(inBracket)
            % rule 4: if the the substrate should target the terminal residue
            if(~isempty(enzObj.isTerminalTarget))
                if(enzObj.isTerminalTarget)
                    parent = nreResidue.getParent;
                    if(isequal(parent.residueType.name,'#bracket'))
                        isValidRxnPos = true;
                    else
                        if(length(nreResidue.getParent.linkageChildren)==1);
                            isValidRxnPos = true;
                        else
                            isValidRxnPos = false;
                        end
                    end
                else
                    isValidRxnPos = true;
                end
            else
                isValidRxnPos = true;
            end
            
            if(~isValidRxnPos)
                continue;
            end
            
            % rule 5:resiude next to terminal residue is the same as
            % acceptorResidue
            requirement        = enzObj.dispAttachResLink;
            requirementresiude = enzObj.resAtt2FG.name;
            nexterminalResidue = nreResidue.getParent;
            if(isequal(nexterminalResidue.residueType.name,'#bracket'))
                numrequiredresidue = 0;
                for j = 1 : length(nreResidues)
                    jthresidue = nreResidues{1,j};
                    if(isequal(jthresidue.residueType.name,requirementresiude))
                        numrequiredresidue = numrequiredresidue+1;
                        nexterminalResidue = jthresidue;
                    end
                end
                
                resfuncnum = 0;
                for j = 1 : length(nreResiduebracket)
                    jthresidue = nreResiduebracket{1,j};
                    if(isequal(jthresidue.residueType.name,enzObj.resfuncgroup.name))
                        resfuncnum = resfuncnum+1;
                    end
                end
                
                isavailable = 1;
                if(resfuncnum>numrequiredresidue);
                    isavailable = 0;
                end
                acceptorTerminal = nexterminalResidue.dispResidueInfo;
                isacceptormatch  = isempty(strfind(acceptorTerminal,'?'));
            else
                isavailable = 1;
                isacceptormatch = 0;
                if(~isempty(nexterminalResidue))
                    acceptorTerminal     = nexterminalResidue.dispResidueInfo;
                else
                    acceptorTerminal    = [];
                end
            end
            
            isexactmatch = isempty(strfind(requirement,'?'));
            if(isexactmatch)&&(isacceptormatch)
                isValidRxnPos = isequal(acceptorTerminal,requirement);
            elseif(numel(acceptorTerminal)==numel(requirement));
                numofacceptunknown = length(strfind(acceptorTerminal,'?'));
                numofexactunknown  = length(strfind(requirement,'?'));
                if(numofexactunknown>=numofacceptunknown)
                    quotaindex =  strfind(requirement,'?');
                    requirement(quotaindex)='';
                    acceptorTerminal(quotaindex)='';
                elseif(numofacceptunknown>numofexactunknown)
                    quotaindex =  strfind(acceptorTerminal,'?');
                    requirement(quotaindex)='';
                    acceptorTerminal(quotaindex)='';
                end
                isValidRxnPos = isequal(acceptorTerminal,requirement);
            else
                isValidRxnPos = false;
            end
            
            if(~isValidRxnPos)||(~isavailable)
                continue;
            end
            
            % rule 6: the product should not be greater than the specified structure
            if(~isempty(enzObj.prodMinStruct))
                isValidRxnPos = isValidRxnPos && ...
                    glycanObj.contains(enzObj.prodMinStruct);
                if(~isValidRxnPos)
                    continue;
                end
            end
            
            % rule 7: the enzyme should not work on the children of specificed structure
            if(~isempty(enzObj.prodMaxStruct))
                isValidRxnPos = isValidRxnPos && ...
                    enzObj.prodMaxStruct.contains(glycanObj);
                if(~isValidRxnPos)
                    continue;
                end
            end
            
            % rule 8: the enzyme should transfer the residue to the target branch containing
            % specified structure
            if(~isempty(enzObj.targetbranchcontain)) % if the rule exists
                chartargetbranch = enzObj.targetbranchcontain.name;
                chartargetbranch = regexprep(chartargetbranch,'freeEnd--',' ');
                chartargetbranch = regexprep(chartargetbranch,'?','');
                chartargetbranch = regexprep(chartargetbranch,'\d','');
                
                if(isempty(enzObj.isTerminalTarget))
                    enzObj.isTerminalTarget = true;
                end
                
                if(~enzObj.isTerminalTarget)
                    parentresidue = nreResidue.getParent;
                    if(~isequal(parentresidue.residueType.name,'#bracket'))
                        charresidue   = glycanObj.getresiduetoterminal(parentresidue,nreResidue);
                        charresidue   = regexprep(charresidue,'freeEnd--','');
                        charresidue   = regexprep(charresidue,'?','');
                        isvalid = (~isempty(strfind(strtrim(charresidue),...
                            strtrim(chartargetbranch))));
                    else
                        for j = 1 : length(commomresidues)
                            jthresidue = commomresidues{1,j};
                            if(~isempty(jthresidue.linkageChildren))
                                continue
                            end
                            if(isequal(jthresidue.residueType.name,'Fuc'))
                                continue
                            end
                            if(isequal(jthresidue.residueType.name,'GlcNAc'))&&...
                                (isequal(jthresidue.getParent.residueType.name,'Man'))&&...
                                (isequal(jthresidue.getParent.anomer.symbol,'b'))
                                continue
                            end
                            char_core = glycanObj.getresiduetoroot(jthresidue);
                            char_core = regexprep(char_core,'freeEnd--',' ');
                            char_core = regexprep(char_core,'?','');
                            char_core = regexprep(char_core,'\d','');
                            break
                        end
                        counter = 0;
                        char_bracket = '';
                        for j = 1 : length(bracketresidue)
                            jthresidue   = bracketresidue{1,j};
                            if(~isempty(jthresidue.linkageChildren))
                                continue
                            end
                            if(isequal(jthresidue.residueType.name,nreResidue.residueType.name))
                                continue
                            end
                            char_bracket{counter+1} = glycanObj.getresiduetoroot(jthresidue);
                            char_bracket{counter+1} = regexprep(char_bracket{counter+1},'?','');
                            char_bracket{counter+1} = regexprep(char_bracket{counter+1},'\d','');
                            char_bracket{counter+1} = regexprep(char_bracket{counter+1},'-#bracket,','');
                            counter = counter+1;
                        end
                        if(~isempty(char_bracket))
                            for j = 1 : length(char_bracket)
                                charresidue = [char_core char_bracket{j}];
                                isvalid = (~isempty(strfind(strtrim(charresidue),...
                                    strtrim(chartargetbranch))));
                                if(isvalid)
                                    break
                                end
                            end
                        else
                            isvalid = (~isempty(strfind(strtrim(char_core),...
                                    strtrim(chartargetbranch))));
                        end
                    end
                    isValidRxnPos = isValidRxnPos && isvalid;
                else
                    parentresidue = nreResidue.getParent;
                    if(~isequal(parentresidue.residueType.name,'#bracket'))
                        char_bracket   = glycanObj.getresiduetoroot(parentresidue);
                        char_bracket   = regexprep(char_bracket,'?','');
                        char_bracket   = regexprep(char_bracket,'\d','');
                        char_bracket   = regexprep(char_bracket,'-#bracket,','');
                        for j = 1 : length(commomresidues)
                            ithresidue = commomresidues{1,j};
                            if(isempty(ithresidue.linkageChildren))
                                char_core = glycanObj.getresiduetoroot(ithresidue);
                                char_core = regexprep(char_core,'freeEnd--',' ');
                                char_core = regexprep(char_core,'?','');
                                char_core = regexprep(char_core,'\d','');
                                break
                            end
                        end
                        charresidue = [char_core char_bracket];
                    else
                        for j = 1 : length(commomresidues)
                            ithresidue = commomresidues{1,j};
                            if(isempty(ithresidue.linkageChildren))&&...
                                    (~isequal(ithresidue.residueType.name,'Fuc'))
                                if(isequal(ithresidue.residueType.name,enzObj.resAtt2FG.name))
                                    charresidue = glycanObj.getresiduetoroot(ithresidue);
                                    charresidue = regexprep(charresidue,'freeEnd--',' ');
                                    charresidue = regexprep(charresidue,'?','');
                                    charresidue = regexprep(charresidue,'\d','');
                                    break
                                else
                                    charresidue  = glycanObj.getresiduetoroot(ithresidue);
                                    for jj = 1 : length(nreResidues)
                                        jjthresidue   = nreResidues{1,jj};
                                        parentresidue = jjthresidue.getParent;
                                        if(isequal(parentresidue.residueType.name,'#bracket'))&&...
                                                (isequal(jjthresidue.residueType.name,enzObj.resAtt2FG.name))
                                            charresidue = linkwithresidue(charresidue,jjthresidue);
                                            break
                                        end
                                    end
                                    charresidue = regexprep(charresidue,'freeEnd--',' ');
                                    charresidue = regexprep(charresidue,'?','');
                                    charresidue = regexprep(charresidue,'\d','');
                                end
                            end
                        end
                    end
                    
                    isValidRxnPos = isValidRxnPos && (~isempty(strfind(strtrim(charresidue),...
                        strtrim(chartargetbranch))));
                end
                
                if(~isValidRxnPos)
                    continue;
                end
            end
        else
            for j = 1 : length(bracketresidue)
                jthnreResidue  = bracketresidue{1,j};
                isincorestruct = 1;
                if(isempty(enzObj.isTerminalTarget))
                    enzObj.isTerminalTarget = 1;
                end
                if(isequal(jthnreResidue.residueType.name,enzObj.resfuncgroup.name))&&...
                        (enzObj.isTerminalTarget)
                    isincorestruct = 0;
                    break
                end
            end
            
            if(isincorestruct)
                % rule 4: if the the substrate should target the terminal residue
                if(~isempty(enzObj.isTerminalTarget))
                    if(enzObj.isTerminalTarget)
                        if(length(nreResidue.getParent.linkageChildren)==1);
                            isValidRxnPos = true;
                        else
                            isValidRxnPos = false;
                        end
                    else
                        isValidRxnPos = true;
                    end
                else
                    isValidRxnPos = true;
                end
                
                if(~isValidRxnPos)
                    continue;
                end
                
                % rule 5:resiude next to terminal residue is the same as
                % acceptorResidue
                requirement        = enzObj.dispAttachResLink;
                nexterminalResidue = nreResidue.getParent;
                if(~isempty(nexterminalResidue))
                    acceptorTerminal     = nexterminalResidue.dispResidueInfo;
                else
                    acceptorTerminal    = [];
                end
                
                isexactmatch = isempty(strfind(requirement,'?'));
                if(isexactmatch)
                    isValidRxnPos = isequal(acceptorTerminal,requirement);
                elseif(numel(acceptorTerminal)==numel(requirement));
                    quotaindex =  strfind(requirement,'?');
                    requirement(quotaindex)='';
                    acceptorTerminal(quotaindex)='';
                    isValidRxnPos = isequal(acceptorTerminal,requirement);
                else
                    isValidRxnPos = false;
                end
                
                if(~isValidRxnPos)
                    continue;
                end
                
                % rule 6: the product should not be greater than the specified structure
                if(~isempty(enzObj.prodMinStruct))
                    isValidRxnPos = isValidRxnPos && ...
                        glycanObj.contains(enzObj.prodMinStruct);
                    if(~isValidRxnPos)
                        continue;
                    end
                end
                
                % rule 7: the enzyme should not work on the children of specificed structure
                if(~isempty(enzObj.prodMaxStruct))
                    isValidRxnPos = isValidRxnPos && ...
                        enzObj.prodMaxStruct.contains(glycanObj);
                    if(~isValidRxnPos)
                        continue;
                    end
                end
                
                
                % rule 8: the enzyme should transfer the residue to the target branch
                if(~isempty(enzObj.targetBranch))  % if the rule exists
                    chartargetbranch   = enzObj.targetBranch.name;
                    charresidue        = glycanObj.getresiduetoroot(nreResidue.getParent);
                    isValidRxnPos      = isValidRxnPos && ...
                        (strcmpi(chartargetbranch,charresidue));
                    if(~isValidRxnPos)
                        continue;
                    end
                end
                
                % rule 9: the enzyme should transfer the residue to the target branch containing
                % specified structure
                if(~isempty(enzObj.targetbranchcontain)) % if the rule exists
                    chartargetbranch = enzObj.targetbranchcontain.name;
                    chartargetbranch = regexprep(chartargetbranch,'freeEnd--',' ');
                    chartargetbranch = regexprep(chartargetbranch,'?','');
                    
                    if(isempty(enzObj.isTerminalTarget))
                        enzObj.isTerminalTarget = true;
                    end
                    
                    if(~enzObj.isTerminalTarget)
                        parentresidue = nreResidue.getParent;
                        charresidue   = glycanObj.getresiduetoterminal(parentresidue,nreResidue);
                        charresidue   = regexprep(charresidue,'freeEnd--','');
                        charresidue   = regexprep(charresidue,'?','');
                        
                        isValidRxnPos = isValidRxnPos && (~isempty(strfind(strtrim(charresidue),...
                            strtrim(chartargetbranch))));
                    else
                        parentresidue = nreResidue.getParent;
                        charresidue   = glycanObj.getresiduetoroot(parentresidue);
                        charresidue   = regexprep(charresidue,'freeEnd--','');
                        charresidue   = regexprep(charresidue,'?','');
                        
                        isValidRxnPos = isValidRxnPos && (~isempty(strfind(strtrim(charresidue),...
                            strtrim(chartargetbranch))));
                    end
                    
                    
                    if(~isValidRxnPos)
                        continue;
                    end
                end
                
                % rule 10: the enzyme should not act on the specificed branch
                if(~isempty(enzObj.targetNABranch))  % if the rule exists
                    if(isa(enzObj.targetNABranch,'GlycanStruct'))
                        chartargetbranch = enzObj.targetNABranch.name;
                        charresidue           = glycanObj.getresiduetoroot(...
                            nreResidue.getParent);
                        isValidRxnPos         = isValidRxnPos && ...
                            (~strcmp(chartargetbranch,charresidue));
                    elseif(isa(enzObj.targetNABranch,'CellArrayList'))
                        for ii = 1 : length(enzObj.targetNABranch)
                            chartargetbranch  = enzObj.targetNABranch.name;
                            charresidue       = glycanObj.getresiduetoroot(...
                                nreResidue.getParent);
                            isValidRxnPos     = isValidRxnPos && ...
                                (~strcmp(chartargetbranch,charresidue));
                        end
                    end
                    
                    if(~isValidRxnPos)
                        continue;
                    end
                end
            else
                continue
            end
        end
        
        glycanSubstrObj     = glycanObj.clone;
        nreResidues         = glycanSubstrObj.getNonRedEndResidue;
        nreResiduetoremove  = nreResidues{1,i};
        
        isResidueDeleted    = glycanSubstrObj.removeNonRedEndResidue(...
            nreResiduetoremove);
        
        % rule 11: It does not contain the specified residue
        if(~isempty(enzObj.substNAResidue))
            NAResiduename = enzObj.substNAResidue.name;
            composition   = glycanSubstrObj.getComposition;
            isValidRxnPos  =  ~(isfield(composition,NAResiduename) ...
                && (composition.(NAResiduename)>=1));
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 12, the enzyme should not work on the parent of specified structure
        if(~isempty(enzObj.substMaxStruct)) % if the rule exists
            isSubsetStruct = includebracket(enzObj.substMaxStruct,glycanSubstrObj);
            isValidRxnPos = isValidRxnPos &&(isSubsetStruct);
            
            if(~isValidRxnPos)
                continue;
            end
        end
        
        % rule 13, the enzyme should not work on the children of specified structure
        if(~isempty(enzObj.substMinStruct))  % if the rule exists
            isSubsetStruct = includebracket(glycanSubstrObj,enzObj.substMinStruct);
            isValidRxnPos = isValidRxnPos &&(isSubsetStruct);
            if(~isValidRxnPos)
                continue;
            end
        end
        
        numSubstr=numSubstr+1;
        substr = GlycanSpecies(glycanSubstrObj);
        substrSpecies.add(substr);
    end
end

[numSubstr,substrSpecies] = reorgnizestructure(substrSpecies,enzObj);
if(nargout>=3)
    for i = 1 : length(substrSpecies)
        substr = substrSpecies.get(i);
        rxns.add(Rxn(substr,prodObj,enzObj));
    end
end
if(nargout==4)
    isPathUpdated = isPathUpdated || isResidueDeleted;
end

if(nargout==4)
    if(isPathUpdated)
        path.addGlycans(substrSpecies);
        path.addGlycan(prodObj);
        path.addRxns(rxns);
    end
end

if(nargout==1)
    varargout{1}=substrSpecies;
elseif(nargout==2)
    varargout{1}=numSubstr;
    varargout{2}=substrSpecies;
elseif(nargout==3)
    varargout{1}=numSubstr;
    varargout{2}=substrSpecies;
    varargout{3}=rxns;
elseif(nargout==4)
    varargout{1}=numSubstr;
    varargout{2}=substrSpecies;
    varargout{3}=rxns;
    varargout{4}=path;
end
end

